#!/usr/bin/env php
<?php

require_once __DIR__ . '/_common.php';

trackAllBranches();

$push = false;
$pull = true;
$checkout = true;

$versions = [];

if ($argc === 1) {
    $versions[] = '*';
} else {
    foreach ($argv as $key => $argument) {
        if ($key === 0) {
            continue;
        }
        if ($argument === '--push') {
            $push = true;
            continue;
        }
        if ($argument === '--no-pull') {
            $pull = false;
            continue;
        }
        if ($argument === '--no-checkout') {
            $checkout = false;
            continue;
        }
        if (fnmatch('*.*.*', $argument)) {
            $versions[] = $argument;
        } elseif (fnmatch('*.*', $argument)) {
            $versions[] = "{$argument}.*";
        } elseif ($argument === 'all') {
            $versions[] = '*';
        } else {
            echo "Unknown argument '{$argument}'", PHP_EOL;
            exit(1);
        }
    }
}

if (!count($versions)) {
    $versions[] = '*';
}

$allBranches = getBranches();
$branches = (function () use ($versions, $allBranches) {
    $result = [];

    foreach ($allBranches as $branch) {
        foreach ($versions as $version) {
            if (fnmatch($version, $branch) || fnmatch($version, substr($branch, 1))) {
                $result[] = $branch;
            }
        }
    }

    return $result;
})();
//$branches[] = 'v5.15.1';

natsort($allBranches);
natsort($branches);

$map = [];

foreach ($branches as $branch) {
    $version = substr($branch, 1);
    $baseVersion = preg_replace('@(\d+\.\d+)\.\d+@', '$1', $version);
    if (!isset($map[$baseVersion])) {
        $map[$baseVersion] = [];
    }

    preg_match('@v([0-9])\.([0-9]+)\.([0-9]+)@', $branch, $matches);
    $nextMinor = $matches[3] + 1;
    $map[$baseVersion][$version] = $branch;
    if (!in_array("v{$matches[1]}.{$matches[2]}.{$nextMinor}", $allBranches, true)) {
        $map[$baseVersion][$baseVersion] = $branch;
    }
}

$last = $map[lastArrayKey($map)];
if (in_array(lastArrayElement($allBranches), $last, true)) {
    $map['latest']['latest'] = $last[array_search(lastArrayElement($allBranches), $last)];
}

if ($pull) {
    passthru('docker pull rikudousage/qt-static-base:16.04');
    passthru('docker pull rikudousage/qt-static-base:18.04');
}

foreach ($map as $baseVersion => $versions) {
    foreach ($versions as $version => $branch) {
        if ($checkout) {
            passthru("git checkout {$branch}", $exitCode);
        }
        if ($pull) {
            passthru("git pull origin {$branch}");
        }
        passthru("docker build -t rikudousage/qt-static:{$version} .");
        if ($push) {
            passthru("docker push rikudousage/qt-static:{$version}");
        }
    }
}
